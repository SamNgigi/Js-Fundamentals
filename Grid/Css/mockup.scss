@import "Partials/variables";
@import "Partials/mixins";
@include mock-base;
.container {
  display: grid; // grid-template: 60px auto 60px / repeat(12, 1fr); // Had to add third row
  // Making way for named lines 
  // grid-template: 60px auto 60px / repeat(12, 1fr);
  // The - in named lines allows to call the prefix as a key word.
  grid-template-columns: [main-start] 1fr [content-start] 5fr[content-end main-end];
  grid-template-rows: [main-start] 40px [content-start] auto [content-end] 40px [main-end];
  grid-gap: 5px;
  /* 
  We can also use grid template areas
  
    We use a dot '.' to indicate an unoccupied space. grid-template-areas: "m h h h h h h h h h h h" "m . c c c c c c c c c ." "m f f f f f f f f f f f";

  */
  @include mockup_color_scheme;
  .header {
    /* 
      Here we define where we want our header column to start which is 1.

      We have to include the space in-between which is the second col.
      
      Lastly we have the far right space and specify that we want our
      header to start at 1 and end at 3.

      grid_column_start: 1;
      grid_column_end: 3;

      The short hand would be as follows.
        grid-column: 1 / 3; 
        grid-column: 1/ span 2;
      When we know the number of columns we are working with. 
      If we don't and we basically want to a column to span from left to right we can use;
        grid-column: 1 /-1;
        */
    // grid-area: h; // make way for Named lines below.
    grid-column: main;
  }
  .menu {
    // grid-area: m;
  }
  .content {
    // grid-area: c;
    grid-area: content;
  }
  .footer {
    // grid-area: f;
    grid-column: main;
  }
}